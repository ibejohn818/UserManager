#!/usr/bin/env python

import json
import sys
import subprocess
import time
import os
from github import Github


def github_api_client():
    # get credentials
    credsFile = "{0}/.github-bumpversion".format(os.environ['HOME'])

    with open(credsFile, "r") as ghc:
        creds = ghc.read().strip()

    api = Github(login_or_token=creds)

    return api


def github_create_pull(client, repo_name, branch, version):

    user = api.get_user()
    repo = user.get_repo(repo_name)

    pr_title = "Bump Version: {0}".format(version)

    pr = repo.create_pull(pr_title, pr_title, "master", branch)
    print(pr)
    return pr

def  git_get_repo_name():

    cmd = ['git', 'config', '--get', 'remote.origin.url']
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, err = proc.communicate()

    if err:
        return False

    cmd = ['basename', out]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, err = proc.communicate()

    if err:
        return False

    out = out.split('.')[0]

    return out

def git_check():

    e = subprocess.call("git diff-index --quiet HEAD --", shell=True)

    if e > 0:
        return False

    return True


def github_merge_pr(pull_request):

    attempts = 0
    res = pull_request.merge()
    print(res)
    print(res.message)
    print(res.merged)
    while not res.merged:
        attempts += 1
        print("Not Merged Waiting...")
        time.sleep(10)
        res = pull_request.merge()
        print(res)
        print(res.message)
        print(res.merged)

        if attempts >= 60:
            print("ERROR: Too many PR Merge attempts ({0})".format(attempts))
            exit(1)

    return res


def git_create_branch(version):

    branch_name = "tag-{0}".format(version)

    cmd = "git checkout -b {0}".format(branch_name)
    e = subprocess.call(cmd, shell=True)

    if e > 0:
        print("ERROR: Create branch failed ({0})".format(branch_name))
        print(cmd)
        exit(1)

    cmd = 'git commit -a -m "Bump Version: {0}"'.format(version)
    e = subprocess.call(cmd, shell=True)

    if e > 0:
        print("ERROR: Command failed")
        print(cmd)
        exit(1)

    # cmd  = 'git tag {0}'.format(version)
    # e = subprocess.call(cmd, shell=True)

    # if e > 0:
        # print("ERROR: Command failed")
        # print(cmd)
        # exit(1)

    cmd = 'git push origin {0}'.format(branch_name)
    e = subprocess.call(cmd, shell=True)

    if e > 0:
        print("ERROR: Push Branch Failed ({0})".format(branch_name))
        print(cmd)
        exit(1)

    return branch_name

def bump(level='rev'):

    filename = "composer.json"

    with open(filename, "r") as jdata:
        d = json.load(jdata)

    version = d['version'].split('.')

    major = int(version[0])
    minor = int(version[1])
    rev = int(version[2])

    if level == 'major':
        major += 1
        minor = 0
        rev = 0
    if level == 'minor':
        minor += 1
        rev = 0
    if level == 'rev':
        rev += 1

    version = '{0}.{1}.{2}'.format(major, minor, rev)

    d['version'] = version

    jdata.close()

    with open(filename, "w") as jdata:
        json.dump(d, jdata, indent=4)
    jdata.close()

    return version

if __name__ == '__main__':

    if not git_check():
        exit("ERROR: Uncommited git changes!")

    repo_name = git_get_repo_name()
    if not repo_name:
        print("Unable to get repos name")
        exit(1)

    print(repo_name)

    levels = ['major', 'minor', 'rev']

    if len(sys.argv) <= 1 or sys.argv[1] not in  levels:
        level = 'rev'
    else:
        level = sys.argv[1]

    version = bump(level)
    branch = git_create_branch(version)

    api = github_api_client()

    pr = github_create_pull(api, repo_name, branch, version)
    print(pr)
